{
	"info": {
		"_postman_id": "fb283b1e-366b-4abd-9f20-e689a40fa546",
		"name": "Nest test Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30658034"
	},
	"item": [
		{
			"name": "info",
			"item": [
				{
					"name": "info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - name\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/info",
							"host": [
								"{{host}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9100/metrics",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9100",
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'data' array is present in the response and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'hasNextPage' field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.hasNextPage).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users?page=1&limit=5&sort=[{\"orderBy\":\"id\",\"order\":\"desc\"}]",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "filters",
									"value": "{\"lastName\":\"a\"}",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "[{\"orderBy\":\"id\",\"order\":\"desc\"}]"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users?page=1&limit=5&sort=[{\"orderBy\":\"id\",\"order\":\"desc\"}]",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "filters",
											"value": "{\"lastName\":\"a\"}",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "[{\"orderBy\":\"id\",\"order\":\"desc\"}]"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1994"
								},
								{
									"key": "ETag",
									"value": "W/\"7ca-tb+Ya35AWU2KjMNgbu8fOTT6bD4\""
								},
								{
									"key": "Date",
									"value": "Thu, 28 Mar 2024 13:31:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"createdAt\": \"2024-03-28T12:29:23.487Z\",\n            \"updatedAt\": \"2024-03-28T12:29:23.487Z\",\n            \"deletedAt\": null,\n            \"id\": 42,\n            \"email\": \"berry.watsica12@gmail.com\",\n            \"provider\": \"email\",\n            \"socialId\": null,\n            \"firstName\": \"Reed\",\n            \"lastName\": \"Gottlieb\",\n            \"photo\": null,\n            \"role\": {\n                \"id\": 1,\n                \"name\": \"Admin\",\n                \"__entity\": \"RoleEntity\"\n            },\n            \"status\": {\n                \"id\": 2,\n                \"name\": \"Inactive\",\n                \"__entity\": \"StatusEntity\"\n            }\n        },\n        {\n            \"createdAt\": \"2024-03-28T12:29:18.111Z\",\n            \"updatedAt\": \"2024-03-28T12:29:18.111Z\",\n            \"deletedAt\": null,\n            \"id\": 41,\n            \"email\": \"alda.runolfsdottir@gmail.com\",\n            \"provider\": \"email\",\n            \"socialId\": null,\n            \"firstName\": \"Alda\",\n            \"lastName\": \"Hammes\",\n            \"photo\": null,\n            \"role\": {\n                \"id\": 1,\n                \"name\": \"Admin\",\n                \"__entity\": \"RoleEntity\"\n            },\n            \"status\": {\n                \"id\": 2,\n                \"name\": \"Inactive\",\n                \"__entity\": \"StatusEntity\"\n            }\n        },\n        {\n            \"createdAt\": \"2024-03-25T08:43:35.140Z\",\n            \"updatedAt\": \"2024-03-25T08:43:35.140Z\",\n            \"deletedAt\": null,\n            \"id\": 40,\n            \"email\": \"marcus_klein78@hotmail.com\",\n            \"provider\": \"email\",\n            \"socialId\": null,\n            \"firstName\": \"Jamison\",\n            \"lastName\": \"Powlowski\",\n            \"photo\": null,\n            \"role\": {\n                \"id\": 1,\n                \"name\": \"Admin\",\n                \"__entity\": \"RoleEntity\"\n            },\n            \"status\": {\n                \"id\": 2,\n                \"name\": \"Inactive\",\n                \"__entity\": \"StatusEntity\"\n            }\n        },\n        {\n            \"createdAt\": \"2024-03-25T08:25:01.530Z\",\n            \"updatedAt\": \"2024-03-25T08:25:01.530Z\",\n            \"deletedAt\": null,\n            \"id\": 39,\n            \"email\": \"pablo_reichert@hotmail.com\",\n            \"provider\": \"email\",\n            \"socialId\": null,\n            \"firstName\": \"Aniyah\",\n            \"lastName\": \"Hane\",\n            \"photo\": {\n                \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\",\n                \"path\": \"http://localhost:3000/api/v1/files/43275b16704d8577f6de4.png\"\n            },\n            \"role\": {\n                \"id\": 1,\n                \"name\": \"Admin\",\n                \"__entity\": \"RoleEntity\"\n            },\n            \"status\": {\n                \"id\": 1,\n                \"name\": \"Active\",\n                \"__entity\": \"StatusEntity\"\n            }\n        },\n        {\n            \"createdAt\": \"2024-03-22T12:17:26.493Z\",\n            \"updatedAt\": \"2024-03-22T12:17:26.493Z\",\n            \"deletedAt\": null,\n            \"id\": 38,\n            \"email\": \"carleton.gottlieb94@gmail.com\",\n            \"provider\": \"email\",\n            \"socialId\": null,\n            \"firstName\": \"Marcia\",\n            \"lastName\": \"Bechtelar\",\n            \"photo\": {\n                \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\",\n                \"path\": \"http://localhost:3000/api/v1/files/43275b16704d8577f6de4.png\"\n            },\n            \"role\": {\n                \"id\": 1,\n                \"name\": \"Admin\",\n                \"__entity\": \"RoleEntity\"\n            },\n            \"status\": {\n                \"id\": 1,\n                \"name\": \"Active\",\n                \"__entity\": \"StatusEntity\"\n            }\n        }\n    ],\n    \"hasNextPage\": true\n}"
						}
					]
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Role name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.role).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.role.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Status name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.status.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get user",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "346"
								},
								{
									"key": "ETag",
									"value": "W/\"15a-lSbh+sV10eUyY62uMS3vMBJ8o5Y\""
								},
								{
									"key": "Date",
									"value": "Thu, 28 Mar 2024 13:32:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"createdAt\": \"2024-03-28T12:29:23.487Z\",\n    \"updatedAt\": \"2024-03-28T12:29:23.487Z\",\n    \"deletedAt\": null,\n    \"id\": 42,\n    \"email\": \"berry.watsica12@gmail.com\",\n    \"provider\": \"email\",\n    \"socialId\": null,\n    \"firstName\": \"Reed\",\n    \"lastName\": \"Gottlieb\",\n    \"photo\": null,\n    \"role\": {\n        \"id\": 1,\n        \"name\": \"Admin\",\n        \"__entity\": \"RoleEntity\"\n    },\n    \"status\": {\n        \"id\": 2,\n        \"name\": \"Inactive\",\n        \"__entity\": \"StatusEntity\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string').and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[\\w-]+$/);",
									"});",
									"",
									"",
									"pm.test(\"Photo object has the required fields - id and path\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.photo).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.photo.id).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.photo.path).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"photo\": {\n    \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\"\n  },\n  \"role\": {\n    \"id\": 1\n  },\n  \"status\": {\n    \"id\": 1\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "Update user",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"photo\": {\n    \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\"\n  },\n  \"role\": {\n    \"id\": 1\n  },\n  \"status\": {\n    \"id\": 1\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "375"
								},
								{
									"key": "ETag",
									"value": "W/\"177-UMVY+DkLzCqcRh+ySg9veSBeSqU\""
								},
								{
									"key": "Date",
									"value": "Thu, 28 Mar 2024 13:32:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"createdAt\": \"2024-03-21T09:29:36.433Z\",\n    \"updatedAt\": \"2024-03-28T12:32:05.493Z\",\n    \"deletedAt\": null,\n    \"id\": 20,\n    \"email\": \"daron.johnston@gmail.com\",\n    \"provider\": \"email\",\n    \"socialId\": null,\n    \"firstName\": \"Willy\",\n    \"lastName\": \"Bashirian\",\n    \"photo\": {\n        \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\",\n        \"path\": \"http://localhost:3000/api/v1/files/43275b16704d8577f6de4.png\"\n    },\n    \"role\": {\n        \"id\": 1\n    },\n    \"status\": {\n        \"id\": 1\n    }\n}"
						}
					]
				},
				{
					"name": "Post user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Provider is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.provider).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Photo object has the required fields - id and path\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.photo).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.photo.id).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.photo.path).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"photo\": {\n    \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\"\n  },\n  \"role\": {\n    \"id\": 1\n  },\n  \"status\": {\n    \"id\": 1\n  },\n  \"provider\":\"email\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Post user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"photo\": {\n    \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\"\n  },\n  \"role\": {\n    \"id\": 1\n  },\n  \"status\": {\n    \"id\": 1\n  },\n  \"provider\":\"email\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "377"
								},
								{
									"key": "ETag",
									"value": "W/\"179-F5s7Pdv/oxR0clSgHKnMzt1fSBI\""
								},
								{
									"key": "Date",
									"value": "Thu, 28 Mar 2024 13:31:53 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"allison.braun@hotmail.com\",\n    \"provider\": \"email\",\n    \"firstName\": \"Quincy\",\n    \"lastName\": \"Hermiston\",\n    \"photo\": {\n        \"id\": \"8160f5ab-e80f-4fcc-b4de-512a095bdd89\",\n        \"path\": \"http://localhost:3000/api/v1/files/43275b16704d8577f6de4.png\"\n    },\n    \"role\": {\n        \"id\": 1\n    },\n    \"status\": {\n        \"id\": 1\n    },\n    \"socialId\": null,\n    \"createdAt\": \"2024-03-28T12:31:53.159Z\",\n    \"updatedAt\": \"2024-03-28T12:31:53.159Z\",\n    \"deletedAt\": null,\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - status\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"User with ID 10 has been successfully deleted\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"        pm.expect(pm.response.json().status).to.equal(\"success\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "project",
			"item": [
				{
					"name": "Get projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.data.length).to.be.at.least(1, \"Array should contain at least one element\");",
									"});",
									"",
									"",
									"pm.test(\"Validate id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    const data = responseData.data;",
									"",
									"    pm.expect(data).to.be.an('array');",
									"",
									"    data.forEach(function (project) {",
									"        pm.expect(project.id).to.be.a('number');",
									"        pm.expect(project.id).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/projects?page=1&limit=5&sort=[{\"orderBy\":\"id\",\"order\":\"desc\"}]",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "filters",
									"value": "{\"title\":\"Awesome Concrete Bike\"}",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "[{\"orderBy\":\"id\",\"order\":\"desc\"}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Title and description are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/projects/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'members' array is present and not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.members).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"The 'id' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.greaterThan(-1, \"Value should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"description\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":23}],\n  \"due_date\": \"2022-03-14T01:59:59Z\",\n  \"sfdsf\":\"sqdqd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/projects/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'title' is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'description' is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"description\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":24}],\n  \"due_date\": \"2022-03-14T01:59:59Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/projects",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the project with ID 7 is deleted from the database\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.json().status).to.equal(\"success\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/projects/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "7"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "task",
			"item": [
				{
					"name": "Get tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate createdAt and updatedAt fields\", function () {",
									"    const responseData = pm.response.json();",
									"    const data = responseData.data;",
									"",
									"    pm.expect(data).to.be.an('array').that.is.not.empty;",
									"",
									"    data.forEach(function (task) {",
									"        pm.expect(task).to.have.property('createdAt').that.is.a('string').and.is.not.empty;",
									"        pm.expect(task).to.have.property('updatedAt').that.is.a('string').and.is.not.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the deletedAt field is null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data[0].deletedAt).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/tasks?page=1&limit=5&filters={\"title\":\"Generic Rubber Ball\"}&sort=[{\"orderBy\":\"id\",\"order\":\"desc\"}]",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "filters",
									"value": "{\"title\":\"Generic Rubber Ball\"}"
								},
								{
									"key": "sort",
									"value": "[{\"orderBy\":\"id\",\"order\":\"desc\"}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'members' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.members).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' field is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.id).to.not.equal(0, \"ID should be a non-zero integer\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'completed' field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.completed).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"description\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22}],\n  \"due_date\": \"2022-03-14T01:59:59Z\",\n  \"sfdsf\":\"sqdqd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "58"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the task with ID 18 has been successfully deleted\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(pm.response.json().status).to.equal(\"success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/tasks/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "18"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'title' is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'description' is a string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.description).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"description\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":24}],\n  \"projectId\":11\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the format of createdAt\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid format\");",
									"});",
									"",
									"pm.test(\"Id must be a positive integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.greaterThan(0, \"Id must be a positive integer\");",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.title).to.be.a('string', \"Title should be a string\");",
									"  pm.expect(responseData.title).to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/tasks/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "61"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "chat",
			"item": [
				{
					"name": "Get all chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.hasNextPage).to.exist.and.to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Data is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Data array is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"hasNextPage is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.hasNextPage).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/chat?page=1&limit=5&sort=[{\"orderBy\":\"id\",\"order\":\"desc\"}]",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "filters",
									"value": "{\"title\":\"Generic Rubber Ball\"}",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "[{\"orderBy\":\"id\",\"order\":\"desc\"}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"createdAt and updatedAt fields are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"createdAt field should not be empty\");",
									"    pm.expect(responseData.updatedAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"updatedAt field should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'deletedAt' field is null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.deletedAt).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"The id field should be a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.above(0, \"Value should be a non-zero integer\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"description\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":{{user_id}}}],\n  \"due_date\": \"2022-03-14T01:59:59Z\",\n  \"sfdsf\":\"sqdqd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chat/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "58"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response has the required field - status\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the chat with ID 18 has been deleted\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"  pm.expect(pm.response.json().status).to.equal(\"success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/chat/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "18"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.exist;",
									"  pm.expect(responseData.members).to.exist;",
									"  pm.expect(responseData.createdAt).to.exist;",
									"  pm.expect(responseData.updatedAt).to.exist;",
									"  pm.expect(responseData.id).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The title field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'members' field is an array and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.members).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate createdAt field is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"createdAt field should be in a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"description\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":24}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chat",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains createdAt, updatedAt, and id properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"    pm.expect(jsonData).to.have.property('updatedAt');",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"",
									"pm.test(\"Each member has properties: createdAt, updatedAt, id, firstName, lastName, role, and status\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.members.forEach(function(member) {",
									"        pm.expect(member).to.have.property('createdAt');",
									"        pm.expect(member).to.have.property('updatedAt');",
									"        pm.expect(member).to.have.property('id');",
									"        pm.expect(member).to.have.property('firstName');",
									"        pm.expect(member).to.have.property('lastName');",
									"        pm.expect(member).to.have.property('role');",
									"        pm.expect(member).to.have.property('status');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/chat/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"chat",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "58"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "messages",
			"item": [
				{
					"name": "Get all chat msgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Data array should contain the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.data.forEach(function(item) {",
									"    pm.expect(item.createdAt).to.exist;",
									"    pm.expect(item.updatedAt).to.exist;",
									"    pm.expect(item.id).to.exist;",
									"    pm.expect(item.content).to.exist;",
									"    pm.expect(item.type).to.exist;",
									"    pm.expect(item.seen).to.exist;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"HasNextPage flag is present and has a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('hasNextPage').that.is.a('boolean');",
									"});",
									"",
									"pm.test(\"Each element in the data array contains the required fields\", function () {",
									"    pm.response.json().data.forEach(function(item) {",
									"        pm.expect(item).to.have.property('createdAt');",
									"        pm.expect(item).to.have.property('updatedAt');",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('content');",
									"        pm.expect(item).to.have.property('type');",
									"        pm.expect(item).to.have.property('seen');",
									"    });",
									"});",
									"",
									"pm.test(\"HasNextPage flag is present and has a boolean value\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('hasNextPage').that.is.a('boolean');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/:chatId?page=1&limit=5&sort=[{\"orderBy\":\"id\",\"order\":\"desc\"}]",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								":chatId"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "filters",
									"value": "{\"title\":\"Generic Rubber Ball\"}",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "[{\"orderBy\":\"id\",\"order\":\"desc\"}]"
								}
							],
							"variable": [
								{
									"key": "chatId",
									"value": "58"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update msg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"The 'id' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'content' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.content).to.be.a('string');",
									"  pm.expect(responseData.content).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"text\",\n  \"content\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":24}],\n  \"sender\":{\"id\":1000},\n  \"chat\":{\"id\":88}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete msg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the message with ID 1 has been successfully deleted\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.json().status).to.equal(\"success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post msg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is an object with expected properties\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object').that.has.all.keys('content', 'type', 'seen', 'sender', 'chat', 'createdAt', 'updatedAt', 'deletedAt', 'id');",
									"});",
									"",
									"pm.test(\"Each property in the response is of correct type\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody.content).to.be.a('string');",
									"    pm.expect(responseBody.type).to.be.a('string');",
									"    pm.expect(responseBody.seen).to.be.a('boolean');",
									"    pm.expect(responseBody.sender).to.be.an('object');",
									"    pm.expect(responseBody.chat).to.be.an('object');",
									"    pm.expect(responseBody.createdAt).to.be.a('string');",
									"    pm.expect(responseBody.updatedAt).to.be.a('string');",
									"    pm.expect(responseBody.deletedAt).to.be.null;",
									"    pm.expect(responseBody.id).to.be.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"text\",\n  \"content\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":24}],\n  \"sender\":{\"id\":1000},\n  \"chat\":{\"id\":58}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": [
						{
							"name": "Post msg",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"text\",\n  \"content\": \"{{$randomJobDescriptor}}\",\n  \"members\": [{\"id\":22},{\"id\":24}],\n  \"sender\":{\"id\":1000},\n  \"chat\":{\"id\":58}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/messages",
									"host": [
										"{{host}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "191"
								},
								{
									"key": "ETag",
									"value": "W/\"bf-RIXtiAyJLnGjUdlAtFP2T5VUHBQ\""
								},
								{
									"key": "Date",
									"value": "Fri, 29 Mar 2024 08:09:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"content\": \"District\",\n    \"type\": \"text\",\n    \"seen\": false,\n    \"sender\": {\n        \"id\": 1007\n    },\n    \"chat\": {\n        \"id\": 58\n    },\n    \"createdAt\": \"2024-03-29T07:09:23.825Z\",\n    \"updatedAt\": \"2024-03-29T07:09:23.825Z\",\n    \"deletedAt\": null,\n    \"id\": 433\n}"
						}
					]
				}
			]
		},
		{
			"name": "notifications",
			"item": [
				{
					"name": "Get all notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.hasNextPage).to.exist.and.to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Data is an array\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.data).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Data array is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"hasNextPage is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.hasNextPage).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications?page=1&limit=5&sort=[{\"orderBy\":\"id\",\"order\":\"desc\"}]",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "filters",
									"value": "{\"seen\":false}",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "[{\"orderBy\":\"id\",\"order\":\"desc\"}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Validate createdAt, updatedAt, and id fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Validate the receivers array is present and contains at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.receivers).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.receivers).to.have.lengthOf.at.least(1, \"Receivers array should have at least one element\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"{{$randomJobDescriptor}}\",\n  \"seen\":true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/notifications/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'status' field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the value of the 'status' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Validate the format of the receivers array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.receivers).to.be.an('array');",
									"  ",
									"  responseData.receivers.forEach(function(receiver) {",
									"    pm.expect(receiver).to.have.property('id');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Validate the format of the sender object\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.sender).to.be.an('object');",
									"  pm.expect(responseData.sender.id).to.exist.and.to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"{{$randomJobDescriptor}}\",\n  \"receivers\": [{\"id\":22},{\"id\":{{user_id}}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/notifications",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "me",
			"item": [
				{
					"name": "Get me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the role object has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    const role = responseData.role;",
									"",
									"    pm.expect(role).to.exist;",
									"    pm.expect(role).to.be.an('object');",
									"    pm.expect(role.id).to.exist;",
									"    pm.expect(role.name).to.exist;",
									"    pm.expect(role.__entity).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the status object has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.status.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.status.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.status.__entity).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.exist.and.to.match(/^\\S+@\\S+\\.\\S+$/, \"Email is not in a valid format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(pm.request.body.toString());",
									"if(pm.response.code == 200){",
									"    console.log(\"success\")",
									"    pm.collectionVariables.set(\"password\",body.password)",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFileName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"oldPassword\": \"{{password}}\",\n  \"photo\":\"7ef6eb8bec08a79eec1fd.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "files",
			"item": [
				{
					"name": "download",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/files/:path",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								":path"
							],
							"variable": [
								{
									"key": "path",
									"value": "7ef6eb8bec08a79eec1fd.png"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code == 200){",
									"    console.log(\"success\")",
									"    pm.collectionVariables.set(\"file_id\",pm.response.json().file.id)",
									"}",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Path is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.file.path).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"createdAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.file.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"createdAt is not in a valid date format\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eee52ad-9d11-4710-bac3-486109fbee42"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"accessToken\",pm.response.json().token)",
									"pm.collectionVariables.set(\"refreshToken\",pm.response.json().refreshToken)",
									"const user_id = pm.response.json().user.id",
									"console.log(\"success uuid: \",user_id)",
									"pm.collectionVariables.set(\"user_id\",user_id)",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response includes refreshToken, token, and tokenExpires\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.refreshToken).to.exist;",
									"  pm.expect(responseData.token).to.exist;",
									"  pm.expect(responseData.tokenExpires).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Role object has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  const role = responseData.user.role;",
									"",
									"  pm.expect(role).to.exist.and.to.be.an('object');",
									"  pm.expect(role.id).to.exist.and.to.be.a('number');",
									"  pm.expect(role.name).to.exist.and.to.be.a('string');",
									"  pm.expect(role.__entity).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/email/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"email",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "login",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/email/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"email",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "897"
								},
								{
									"key": "ETag",
									"value": "W/\"381-5B8IINK4Z62oKZy6OyURC0Zwnio\""
								},
								{
									"key": "Date",
									"value": "Thu, 28 Mar 2024 13:28:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uSWQiOjUxLCJoYXNoIjoiMzM2YWJmMGI1Y2I1OTJiNzI4MDdjNTVjMmQwMTg5M2EwYzZkYzlhYjk1YWU5ODE4YzgyNDQ3YTVkNTU1OTBiMyIsImlhdCI6MTcxMTYzMjUwMiwiZXhwIjoyMDI2OTkyNTAyfQ.hYENB2xQZYbE4wu0lX-7e8Wd0FrTCDW_K9sdGLS39BM\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDAsInJvbGUiOnsiaWQiOjEsIm5hbWUiOiJBZG1pbiIsIl9fZW50aXR5IjoiUm9sZUVudGl0eSJ9LCJzZXNzaW9uSWQiOjUxLCJpYXQiOjE3MTE2MzI1MDIsImV4cCI6MTcxMTYzNjEwMn0.QV2dAObwTCEyJKW0WeaG5s8ZZPb4Jm_7GZ8t1FRjjQg\",\n    \"tokenExpires\": 1711636102208,\n    \"user\": {\n        \"createdAt\": \"2024-03-25T08:43:35.140Z\",\n        \"updatedAt\": \"2024-03-25T08:43:35.140Z\",\n        \"deletedAt\": null,\n        \"id\": 40,\n        \"email\": \"marcus_klein78@hotmail.com\",\n        \"provider\": \"email\",\n        \"socialId\": null,\n        \"firstName\": \"Jamison\",\n        \"lastName\": \"Powlowski\",\n        \"photo\": null,\n        \"role\": {\n            \"id\": 1,\n            \"name\": \"Admin\",\n            \"__entity\": \"RoleEntity\"\n        },\n        \"status\": {\n            \"id\": 2,\n            \"name\": \"Inactive\",\n            \"__entity\": \"StatusEntity\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(pm.request.body.toString());",
									"pm.collectionVariables.set(\"email\",body.email)",
									"pm.collectionVariables.set(\"password\",body.password)",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Status should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"roleId\":\"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/email/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"email",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirm email",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"hash\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25maXJtRW1haWxVc2VySWQiOjIxNSwiaWF0IjoxNzExNjM0NDIzLCJleHAiOjE3MTE3MjA4MjN9.zDq2Zfo9IiXHN4OEW7-UKVd6k6Nznz76RNx1ubL07Xw\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/email/confirm",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"email",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "forgot password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - status\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/forgot/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"forgot",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{password}}\",\n  \"hash\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb3Jnb3RVc2VySWQiOjE5LCJpYXQiOjE3MTA3Njc0OTAsImV4cCI6MTcxMDc2OTI5MH0.wQhYxel_HAi8iJl_AVJwxeNVeMlpVSyeJCaAusMdbGw\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/reset/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"reset",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"accessToken\",pm.response.json().token)",
									"pm.collectionVariables.set(\"refreshToken\",pm.response.json().refreshToken)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/refresh",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": [
						{
							"name": "refresh",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "538"
								},
								{
									"key": "ETag",
									"value": "W/\"21a-T7rv339tOzgM7uem7OwPrQpLjxE\""
								},
								{
									"key": "Date",
									"value": "Thu, 28 Mar 2024 13:30:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDIsInJvbGUiOnsiaWQiOjEsIm5hbWUiOiJBZG1pbiIsIl9fZW50aXR5IjoiUm9sZUVudGl0eSJ9LCJzZXNzaW9uSWQiOjU0LCJpYXQiOjE3MTE2MzI2MzgsImV4cCI6MTcxMTYzNjIzOH0.GKkjC1wobAyoOl9bmq8xs_qQslsojtJ6bGU4k4IOfGo\",\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uSWQiOjU0LCJoYXNoIjoiN2Y2YjJkYWZlNjQ3YmEyMmI3M2I2ZTNmMzNkNjY0ZTE2ZDNhOWJiNGJlNmZlN2VjYzdiYWQ3NGY5NDc3MDI2NiIsImlhdCI6MTcxMTYzMjYzOCwiZXhwIjoyMDI2OTkyNjM4fQ.8I85Vd63iRLaGgRJ90wCphFRxJyCJpNLvXM5YcIANh0\",\n    \"tokenExpires\": 1711636238943\n}"
						}
					]
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - status\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Status field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "-will be set on login-",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "-will be set on login-",
			"type": "string"
		},
		{
			"key": "email",
			"value": "-will be set on login-",
			"type": "string"
		},
		{
			"key": "password",
			"value": "-will be set on login-",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "-will be set on login-",
			"type": "string"
		},
		{
			"key": "file_id",
			"value": "-will be set on upload-",
			"type": "string"
		},
		{
			"key": "file_path",
			"value": "-will be set on upload-",
			"type": "string"
		}
	]
}